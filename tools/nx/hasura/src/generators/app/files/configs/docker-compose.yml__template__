version: '3.6'

name: <%= projectName %>

services:

  postgres:
    image: postgres:12
    restart: unless-stopped
    container_name: <%= projectName %>-graphql-engine-postgres
    volumes:
      - db_<%= projectName %>:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: postgrespassword
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

  graphql-engine:
    image: hasura/graphql-engine:v<%= hasuraVersion %>
    ports:
      - '${HASURA_PORT}:8080'
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/healthz" ]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 2s
    container_name: <%= projectName %>-graphql-engine
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres
      ## enable the console served by server
      HASURA_GRAPHQL_ENABLE_CONSOLE: 'false' # set to "false" to disable console
      ## enable debugging mode. It is recommended to disable this in production
      HASURA_GRAPHQL_DEV_MODE: 'true'
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      ## uncomment next line to set an admin secret
      HASURA_GRAPHQL_ADMIN_SECRET: '${HASURA_GRAPHQL_ADMIN_SECRET}'
      WEBHOOK_MASTER_URL: '${HASURA_WEBHOOK_MASTER_URL}'
      WEBHOOK_MASTER_TOKEN: '${HASURA_WEBHOOK_MASTER_TOKEN}'
      ACTION_MASTER_URL: '${HASURA_ACTION_MASTER_URL}'
      ACTION_MASTER_TOKEN: '${HASURA_ACTION_MASTER_TOKEN}'
      HASURA_GRAPHQL_EXPERIMENTAL_FEATURES: 'naming_convention'

volumes:
  db_<%= projectName %>: {}
